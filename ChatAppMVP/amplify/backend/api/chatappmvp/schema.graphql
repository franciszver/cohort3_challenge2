# Chat App MVP - GraphQL Schema
# Supports real-time messaging, group chats, and user authentication

type User @model @auth(rules: [
  { allow: owner, ownerField: "id" },
  { allow: private, operations: [read] }
]) {
  id: ID!
  username: String! @index(name: "byUsername", queryField: "getUserByUsername")
  email: String! @index(name: "byEmail", queryField: "getUserByEmail")  
  displayName: String
  avatar: String
  status: UserStatus
  lastSeen: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Conversation @model @auth(rules: [
  { allow: owner, ownerField: "participants" },
  { allow: private, operations: [read] }
]) {
  id: ID!
  name: String # For group chats (optional for 1-to-1)
  description: String
  isGroup: Boolean!
  participants: [String!]! # Array of User IDs
  lastMessage: String # Last message content (for preview)
  lastMessageAt: AWSDateTime
  lastMessageSender: String # User ID of last message sender
  createdBy: String! # User ID who created the conversation
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ConversationParticipant @model @auth(rules: [
  { allow: owner, ownerField: "userId" }
]) {
  id: ID!
  userId: String! @index(name: "byUser", sortKeyFields: ["conversationId"])
  conversationId: String! @index(name: "byConversation", sortKeyFields: ["userId"])
  joinedAt: AWSDateTime!
  leftAt: AWSDateTime
  role: ConversationRole
  unreadCount: Int
  lastReadAt: AWSDateTime
  notifications: Boolean
}

type Message @model @auth(rules: [
  { allow: owner, ownerField: "senderId" },
  { allow: private, operations: [read] }
]) {
  id: ID!
  content: String!
  messageType: MessageType!
  senderId: String! @index(name: "bySender", sortKeyFields: ["createdAt"])
  conversationId: String! @index(name: "byConversation", sortKeyFields: ["createdAt"])
  attachments: [String] # URLs to files/images
  metadata: AWSJSON # For extensibility (reactions, etc.)
  editedAt: AWSDateTime
  deletedAt: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type MessageRead @model @auth(rules: [
  { allow: owner, ownerField: "userId" }
]) {
  id: ID!
  messageId: String! @index(name: "byMessage", sortKeyFields: ["userId"])
  userId: String! @index(name: "byUser", sortKeyFields: ["readAt"])
  readAt: AWSDateTime!
}

# Enums for type safety
enum UserStatus {
  ONLINE
  OFFLINE  
  AWAY
  BUSY
}

enum ConversationRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM # For system messages like "User joined"
}

# Real-time Subscriptions will be auto-generated by Amplify for each model

# Custom Mutations for complex operations (will be added in later tasks)
# type Mutation {
#   joinConversation(conversationId: String!): ConversationParticipant
#   leaveConversation(conversationId: String!): Boolean  
#   markMessagesAsRead(conversationId: String!, lastReadMessageId: String!): Boolean
# }

# Custom Queries for efficient data fetching (will be added in later tasks)
# type Query {
#   searchUsers(query: String!, limit: Int = 10): [User]
# }